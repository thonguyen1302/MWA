This file contains MongoDB queries for 23 questions of Lab 8. All these queries are written by considering mongoskin library. All longitude and latitude inside coord is done by considering google's location format i.e. [latitude, longitude]

1. Find all documents
db.restaurants.find({})


2. Find selected fields restaurant_id, name, district and cuisine for all documents
db.restaurants.find({}, {
    'name': 1,
    'district': 1,
    'cuisine': 1,
    'restaurant_id': 1
})


3. Find selected fields restaurant_id, name, district and cuisine excluding _id for all documents
db.restaurants.find({}, {
    'name': 1,
    'district': 1,
    'cuisine': 1,
    'restaurant_id': 1,
    _id: 0
})


4. Find selected fields restaurant_id, name, district and zipcode excluding _id for all documents
db.restaurants.find({}, {
    'restaurant_id': 1,
    'name': 1,
    'district': 1,
    'address.zipcode': 1,
    _id: 0
})


5. Find all restaurants which is in the district Bronx
db.restaurants.find({'district': 'Bronx'})


6. Find first 5 restaurants which is in the district Bronx
db.restaurants.find({'district': 'Bronx'}).limit(5)


7. Find next 5 restaurants after skipping 5 restaurants in the district Bronx
db.restaurants.find({'district': 'Bronx'}).skip(5).limit(5)


8. Find restaurants which locates in latitude value less than -95.754168
db.restaurants.find({'address.coord.0': {$lt: -95.754168}})


9. Find restaurants that does not prepare any cuisine of 'American' and their grade score more than 70 and latitude less than -65.754168
db.restaurants.find({$and: [{'cuisine': {$ne: 'American'}}, {'address.coord.0': {$lt: -65.754168}}, {'grades.score': {$gt: 70}}]})


10. Find the restaurant_id, name, district and cuisine for those restaurants which contains 'Wil' as first three letters for its name
db.restaurants.find({'name': {$regex: '^Wil'}}, {
    'restaurant_id': true,
    'name': true,
    'district': true,
    'cuisine': true
})


11. Find the restaurant_id, name, district and cuisine for those restaurants which contains 'ces' as last three letters for its name
db.restaurants.find({'name': {$regex: 'ces$'}}, {
    'address': 0,
    'grades': 0
})


12. Find the restaurant_id, name, district and cuisine for those restaurants which contains 'Reg' as three letters somewhere in its name
db.restaurants.find({'name': {$regex: 'Reg'}}, {
    'address': false,
    'grades': false
})


13. Find the restaurants which belongs to the district Bronx and prepared either American or Chinese dish
db.restaurants.find({$and: [{'district': 'Bronx'}, {'cuisine': {$in: ['American', 'Chinese']}}]})


14. Find the restaurant_id, name, district and cuisine for those restaurants which belongs to the district Staten Island or Queens or Bronx or Brooklyn
db.restaurants.find({'district': {$in: ['Staten Island', 'Queens', 'Bronx', 'Brooklyn']}}, {
    'restaurant_id': 1,
    'name': 1,
    'district': 1,
    'cuisine': 1
})


15. Find the restaurant_id, name, district and cuisine for those restaurants which are not belonging to the district Staten Island or Queens or Bronx or Brooklyn
db.restaurants.find({'district': {$nin: ['Staten Island', 'Queens', 'Bronx', 'Brooklyn']}}, {
    'address': 0,
    'grades': 0
})


16. Find the restaurant_id, name, district and cuisine for those restaurants which achieved a score which is not more than 10
db.restaurants.find({'grades.score': {$lte: 10}}, {'address': 0, 'grades': 0})


17. Find the restaurant_id, name, address and geographical location for those restaurants where 2nd element of coord array contains a value which is more than 42 and upto 52.
db.restaurants.find({'address.coord.1': {$gt: 42, $lte: 52}}, {
    'restaurant_id': 1,
    'name': 1,
    'address': 1
})


18. Arrange the name of the restaurants in ascending order along with all the columns
db.restaurants.find({}).sort({'name': 1})


19. Arrange the name of the restaurants in descending order along with all the columns
db.restaurants.find({}).sort({'name': -1})


20. Arrange the name of the cuisine in ascending order and for those same cuisine district should be in descending order
db.restaurants.find({}).sort({'cuisine': 1, 'district': -1})


21. Know whether all the address contains the street or not
db.restaurants.find({'address.street': {$exists: false}})


22. Select all the documents in the restaurants collection where the coord filed value is Double
db.restaurants.find({'address.coord': {$type: 'double'}})


23. Find the restaurant name, district, longitude and latitude and cuisine for those restaurants which contains 'Mad' as the first three letters of its name
db.restaurants.find({'name': {$regex: '^Mad'}}, {
    'name': true,
    'district': true,
    'address.coord': true,
    'cuisine': true
})